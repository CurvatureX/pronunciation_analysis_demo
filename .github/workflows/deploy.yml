name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-1

      - name: Generate SSH key pair
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/pronunciation-analysis-key -N ""
          echo "PUBLIC_KEY=$(cat ~/.ssh/pronunciation-analysis-key.pub)" >> $GITHUB_ENV
          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat ~/.ssh/pronunciation-analysis-key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Check existing infrastructure
        id: check-infra
        run: |
          # Check if EC2 instance exists
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=pronunciation-analysis-web-server" "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query "Reservations[0].Instances[0].InstanceId" --output text)

          if [ "$INSTANCE_ID" != "None" ] && [ "$INSTANCE_ID" != "" ]; then
            echo "existing_instance=true" >> $GITHUB_OUTPUT
            echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
            echo "✅ Found existing EC2 instance: $INSTANCE_ID"
            
            # Get the public IP
            PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
            echo "🌐 Existing public IP: $PUBLIC_IP"
          else
            echo "existing_instance=false" >> $GITHUB_OUTPUT
            echo "⚠️ No existing instance found, will create new infrastructure"
            
            # Clean up any orphaned resources only if no instance exists
            aws ec2 describe-key-pairs --query "KeyPairs[?starts_with(KeyName, 'pronunciation-analysis-deployer-key')].KeyName" --output text | \
            xargs -r -I {} aws ec2 delete-key-pair --key-name {} || true
            
            aws ec2 describe-security-groups \
              --filters "Name=group-name,Values=pronunciation-analysis-web-sg-*" \
              --query "SecurityGroups[].GroupId" --output text | \
            xargs -r -I {} aws ec2 delete-security-group --group-id {} || true
          fi

      - name: Terraform Plan
        if: steps.check-infra.outputs.existing_instance == 'false'
        run: terraform plan -out=tfplan -var="public_key=${{ env.PUBLIC_KEY }}"
        working-directory: ./infrastructure

      - name: Terraform Apply
        if: steps.check-infra.outputs.existing_instance == 'false'
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure

      - name: Get EC2 public IP
        id: get-ip
        run: |
          if [ "${{ steps.check-infra.outputs.existing_instance }}" == "true" ]; then
            echo "ec2_ip=${{ steps.check-infra.outputs.public_ip }}" >> $GITHUB_OUTPUT
            echo "🌐 Using existing Static IP Address: ${{ steps.check-infra.outputs.public_ip }}"
            echo "🔗 Application URL: http://${{ steps.check-infra.outputs.public_ip }}:3000"
            echo "🔗 Application URL (via Nginx): http://${{ steps.check-infra.outputs.public_ip }}"
            echo "🚀 API Endpoint: http://${{ steps.check-infra.outputs.public_ip }}:3000/api/pronunciation-assessment"
          else
            echo "ec2_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
            echo "🌐 New Static IP Address: $(terraform output -raw ec2_public_ip)"
            echo "🔗 Application URL: http://$(terraform output -raw ec2_public_ip):3000"
            echo "🔗 Application URL (via Nginx): http://$(terraform output -raw ec2_public_ip)"
            echo "🚀 API Endpoint: http://$(terraform output -raw ec2_public_ip):3000/api/pronunciation-assessment"
          fi
        working-directory: ./infrastructure

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r .next deployment/
          cp -r public deployment/
          cp package*.json deployment/
          cp next.config.js deployment/
          # Don't include node_modules - we'll install them on the server

      - name: Deploy to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ steps.get-ip.outputs.ec2_ip }}
          username: ec2-user
          key: ${{ env.PRIVATE_KEY }}
          port: 22
          source: "deployment/*"
          target: "/home/ec2-user/app"
          strip_components: 1

      - name: Clean up and start application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.get-ip.outputs.ec2_ip }}
          username: ec2-user
          key: ${{ env.PRIVATE_KEY }}
          port: 22
          script: |
            echo "🧹 Cleaning up existing application..."

            # Stop the running application
            pm2 delete pronunciation-analysis-demo || true

            # Clean up old application files
            if [ -d "/home/ec2-user/app" ]; then
              echo "📂 Removing old application files..."
              rm -rf /home/ec2-user/app/*
              rm -rf /home/ec2-user/app/.*
            else
              mkdir -p /home/ec2-user/app
            fi

            # Clean up npm cache to free space
            echo "🧹 Cleaning npm cache..."
            npm cache clean --force 2>/dev/null || true

            echo "✅ Cleanup completed, application directory is clean"

            # Show disk usage after cleanup
            echo "💾 Disk usage after cleanup:"
            df -h /
            echo ""
            echo "🚀 Setting up application environment..."

            cd /home/ec2-user/app

            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js 18..."
              curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
              sudo dnf install -y nodejs
              echo "✅ Node.js installed: $(node --version)"
            else
              echo "✅ Node.js already installed: $(node --version)"
            fi

            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              sudo npm install -g pm2
              echo "✅ PM2 installed: $(pm2 --version)"
            else
              echo "✅ PM2 already installed: $(pm2 --version)"
            fi

            echo ""
            echo "⏳ Waiting for new application files to be deployed..."

      - name: Start application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.get-ip.outputs.ec2_ip }}
          username: ec2-user
          key: ${{ env.PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ec2-user/app

            echo "🚀 Starting application..."

            # Install dependencies if package.json exists
            if [ -f "package.json" ]; then
              echo "📦 Installing dependencies..."
              npm ci --production --no-optional
              echo "✅ Dependencies installed"
              
              # Show disk usage after installation
              echo "💾 Disk usage after dependency installation:"
              df -h /
            fi

            # Start the application with PM2
            echo "🔄 Starting application with PM2..."
            pm2 start npm --name "pronunciation-analysis-demo" -- start
            pm2 save
            pm2 startup

            echo "✅ Application started successfully!"
            echo ""
            echo "📊 Application Status:"
            pm2 list
            echo ""
            echo "🔗 Application should be available at the URLs shown below"

      - name: Display Deployment Information
        run: |
          if [ "${{ steps.check-infra.outputs.existing_instance }}" == "true" ]; then
            echo "🔄 Application update completed successfully!"
            echo "♻️ Reused existing EC2 instance: ${{ steps.check-infra.outputs.instance_id }}"
          else
            echo "🎉 New deployment completed successfully!"
            echo "🆕 Created new infrastructure"
          fi
          echo ""
          echo "📍 DEPLOYMENT INFORMATION:"
          echo "========================="
          echo "🌐 Static IP Address: ${{ steps.get-ip.outputs.ec2_ip }}"
          echo "🔗 Application URL (Direct): http://${{ steps.get-ip.outputs.ec2_ip }}:3000"
          echo "🔗 Application URL (Nginx): http://${{ steps.get-ip.outputs.ec2_ip }}"
          echo "🚀 API Endpoint: http://${{ steps.get-ip.outputs.ec2_ip }}:3000/api/pronunciation-assessment"
          echo ""
          echo "📝 Additional Information:"
          echo "- SSH Access: ssh -i your-key.pem ec2-user@${{ steps.get-ip.outputs.ec2_ip }}"
          echo "- PM2 Status: ssh -i your-key.pem ec2-user@${{ steps.get-ip.outputs.ec2_ip }} 'pm2 list'"
          echo "- Application Logs: ssh -i your-key.pem ec2-user@${{ steps.get-ip.outputs.ec2_ip }} 'pm2 logs pronunciation-analysis-demo'"
